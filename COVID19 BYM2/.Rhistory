nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
ggs_BYMeco <- ggs(modelBYM.eco$samples)
boxplot(log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)
exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b))
boxplot(exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
summary(exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
boxplot(log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
summary(exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
boxplot(log(COVID19eco$expectd) + model$alpha -1*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
summary(exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
boxplot(log(COVID19eco$expectd) + model$alpha + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
summary(exp((log(COVID19eco$expectd) + model$alpha -2*COVID19eco$NO2 + -2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
exp(log(COVID19eco$expectd) + model$alpha + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
model$alpha
boxplot(log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
2*scale(COVID19eco$TtlICUB)[,1]
boxplot(log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)
exp((log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b))
boxplot(exp((log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
which.max(exp((log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 2*scale(COVID19eco$TtlICUB)[,1] + model$b)))
log(COVID19eco$expectd)[303]
2*scale(COVID19eco$TtlICUB)[,1][303]
model$b
log(COVID19eco$expectd)[2]
log(COVID19eco$expectd)[10]
2*scale(COVID19eco$TtlICUB)[,1][10]
2*scale(COVID19eco$TtlICUB)[,1][303]
which.max(exp((log(COVID19eco$expectd) + 0 + 0*COVID19eco$NO2 + 0*scale(COVID19eco$TtlICUB)[,1] + model$b)))
inits <- list(
list(
# first chain
alpha = 0,
tau.theta = 1,
tau.b = 1,
theta = rep(0.01, times = n.LTLA),
phi = rep(0.01, times = n.LTLA),
rho = 0.6,
beta_1 = 0,
beta_2 = 0,
beta_32 = 0,
beta_33 = 0,
beta_34 = 0,
beta_35 = 0
),
#chain 2
list(
alpha = 1,
tau.theta = 3,
tau.b = 3,
theta = rep(0.1, times = n.LTLA),
phi = rep(0.1, times = n.LTLA),
rho = 0.9,
beta_1 = - 2,
beta_2 = 1,
beta_32 = 1,
beta_33 = 1,
beta_34 = 1,
beta_35 = 1
)
)
model <- nimbleModel(code= BYMecoCode, constants = COVIDConsts, data = COVIDdata, inits = inits[[1]])
model$calculate(O[303])
model$calculate("O[303]")
inits <- list(
list(
# first chain
alpha = 0,
tau.theta = 1,
tau.b = 1,
theta = rep(0.01, times = n.LTLA),
phi = rep(0.01, times = n.LTLA),
rho = 0.6,
beta_1 = 0,
beta_2 = 0,
beta_32 = 0,
beta_33 = 0,
beta_34 = 0,
beta_35 = 0
),
#chain 2
list(
alpha = -2,
tau.theta = 3,
tau.b = 3,
theta = rep(0.1, times = n.LTLA),
phi = rep(0.1, times = n.LTLA),
rho = 0.9,
beta_1 = - 2,
beta_2 = 1,
beta_32 = 1,
beta_33 = 1,
beta_34 = 1,
beta_35 = 1
)
)
model <- nimbleModel(code= BYMecoCode, constants = COVIDConsts, data = COVIDdata, inits = inits[[2]])
model$calculate("O[303]")
inits <- list(
list(
# first chain
alpha = 0,
tau.theta = 1,
tau.b = 1,
theta = rep(0.01, times = n.LTLA),
phi = rep(0.01, times = n.LTLA),
rho = 0.6,
beta_1 = 0,
beta_2 = 0,
beta_32 = 0,
beta_33 = 0,
beta_34 = 0,
beta_35 = 0
),
#chain 2
list(
alpha = -2,
tau.theta = 3,
tau.b = 3,
theta = rep(0.1, times = n.LTLA),
phi = rep(0.1, times = n.LTLA),
rho = 0.9,
beta_1 = - 2,
beta_2 = 1,
beta_32 = 1,
beta_33 = 1,
beta_34 = 1,
beta_35 = 1
)
)
t0<- Sys.time()
modelBYM.eco <- nimbleMCMC(code = BYMecoCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = parameters,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
ggs_BYMeco <- ggs(modelBYM.eco$samples)
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta_1", "RR.beta_2", "RR.beta_32", "RR.beta_33", "RR.beta_34", "RR.beta_35")) %>%
ggs_traceplot() + theme_bw()
c(-2, -2, rep(1, 5))
c(-2,-2, rep(1, 5))
BYMecoCode <- nimbleCode(
{
for (i in 1:N){
O[i] ~ dpois(mu[i])                                       # Poisson likelihood
log(mu[i]) <- log(E[i]) + inprod(beta[], X[i,]) + b[i]
# of course you can write this explicitly too:
# log(mu[i]) <- log(E[i]) + alpha + b[i] +
#               beta1*X1[i] + beta2*X2[i] +
#               beta32*X32[i] + beta33*X33[i] +
# beta34*X34[i] + beta35*X35[i]
b[i] <- (1/sqrt(tau.b))*(sqrt((1-rho))*theta[i] +
sqrt(rho/scale)*phi[i])
theta[i] ~ dnorm(0, tau = tau.theta)                      # area-specific RE
SMR[i] <- exp(b[1] + b[i])                                # area-specific SIR
resSMR[i] <- exp(b[i])                                    # area-specific residual SIR
e[i] <- (O[i]-mu[i])/sqrt(mu[i])                          # residuals
proba.resSMR[i]<-step(resSMR[i]-1)                        # Posterior probability
}
# ICAR prior
phi[1:N] ~ dcar_normal(adj[1:L], weights[1:L],
num[1:N], tau = 1, zero_mean = 1)    # its scaled so tau = 1
# Priors
beta[1] ~ dflat()                                           # vague prior (Unif(-inf, +inf))
overallRR <- exp(beta[1])
# precision parameter of the reparametrisation
tau.b ~ dgamma(1, 0.01)                                     # prior for the precision of b
sigma2.b <- 1/tau.b                                         # the variance of b
# precision parameter of theta
tau.theta ~ dgamma(1, 0.01)                                 # prior for the precision of theta
sigma2.theta <- 1/tau.theta                                 # the variance of theta
# mixing parameter
rho ~ dbeta(1, 1)                                           # prior for the mixing parameter
# priors for the fixed effects
for(j in 1:(K-1)){
beta[j+1] ~ dnorm(0, tau = 0.1)
RR.beta[j] <- exp(beta[j+1])
}
RR.beta2_5NO2 <- exp(beta[2] * 5)                           # this will be explained later
}
)
W.scale <- nb2mat(LTLA_nb, zero.policy = TRUE, style = "B")
W.scale <- -W.scale
diag(W.scale) <- abs(apply(W.scale, 1, sum))
# solve(W.scale) # this should not work since by definition the matrix is singular
Q = inla.scale.model(W.scale, constr=list(A=matrix(1, nrow=1, ncol=nrow(W.scale)), e=0))
scale = exp((1/nrow(W.scale))*sum(log(1/diag(Q))))
n.LTLA <- dim(COVID19eco)[1]
# Format the data for NIMBLE in a list
COVIDdata = list(
O = COVID19eco$deaths,                        # observed nb of deaths
# covariates
X = cbind(1,                                  # for the intercept
COVID19eco$NO2,                     # NO2
scale(COVID19eco$TtlICUB)[,1],      # ICU beds
COVID19eco$IMD_2,                   # IMD 2
COVID19eco$IMD_3,                   # IMD 3
COVID19eco$IMD_4,                   # IMD 4
COVID19eco$IMD_5)                   # IMD 5
)
COVIDConsts <-list(
N = n.LTLA,                                   # nb of LTLAs
# adjacency matrix
L = length(nbWB_B$weights),                   # the number of neighboring areas
E = COVID19eco$expectd,                       # expected number of deaths
adj = nbWB_B$adj,                             # the elements of the neigh. matrix
num = nbWB_B$num,
weights = nbWB_B$weights,
scale = scale,                                # the scale for the covariance
K = 7                                         # the total number of covariates
)
inits <- list(
list(
# first chain
tau.theta = 1,
tau.b = 1,
theta = rep(0.01, times = n.LTLA),
phi = rep(0.01, times = n.LTLA),
rho = 0.6,
beta = rep(0, 7)
),
#chain 2
list(
tau.theta = 3,
tau.b = 3,
theta = rep(0.1, times = n.LTLA),
phi = rep(0.1, times = n.LTLA),
rho = 0.9,
beta = c(-2,-2, rep(1, 5))
)
)
BYMecoCode <- nimbleCode(
{
for (i in 1:N){
O[i] ~ dpois(mu[i])                                       # Poisson likelihood
log(mu[i]) <- log(E[i]) + inprod(beta[], X[i,]) + b[i]
# of course you can write this explicitly too:
# log(mu[i]) <- log(E[i]) + alpha + b[i] +
#               beta1*X1[i] + beta2*X2[i] +
#               beta32*X32[i] + beta33*X33[i] +
# beta34*X34[i] + beta35*X35[i]
b[i] <- (1/sqrt(tau.b))*(sqrt((1-rho))*theta[i] +
sqrt(rho/scale)*phi[i])
theta[i] ~ dnorm(0, tau = tau.theta)                      # area-specific RE
SMR[i] <- exp(b[1] + b[i])                                # area-specific SIR
resSMR[i] <- exp(b[i])                                    # area-specific residual SIR
e[i] <- (O[i]-mu[i])/sqrt(mu[i])                          # residuals
proba.resSMR[i]<-step(resSMR[i]-1)                        # Posterior probability
}
# ICAR prior
phi[1:N] ~ dcar_normal(adj[1:L], weights[1:L],
num[1:N], tau = 1, zero_mean = 1)    # its scaled so tau = 1
# Priors
beta[1] ~ dflat()                                           # vague prior (Unif(-inf, +inf))
overallRR <- exp(beta[1])
# precision parameter of the reparametrisation
tau.b ~ dgamma(1, 0.01)                                     # prior for the precision of b
sigma2.b <- 1/tau.b                                         # the variance of b
# precision parameter of theta
tau.theta ~ dgamma(1, 0.01)                                 # prior for the precision of theta
sigma2.theta <- 1/tau.theta                                 # the variance of theta
# mixing parameter
rho ~ dbeta(1, 1)                                           # prior for the mixing parameter
# priors for the fixed effects
for(j in 1:(K-1)){
beta[j+1] ~ dnorm(0, tau = 0.1)
RR.beta[j] <- exp(beta[j+1])
}
RR.beta1_5NO2 <- exp(beta[2] * 5)                           # this will be explained later
}
)
W.scale <- nb2mat(LTLA_nb, zero.policy = TRUE, style = "B")
W.scale <- -W.scale
diag(W.scale) <- abs(apply(W.scale, 1, sum))
# solve(W.scale) # this should not work since by definition the matrix is singular
Q = inla.scale.model(W.scale, constr=list(A=matrix(1, nrow=1, ncol=nrow(W.scale)), e=0))
scale = exp((1/nrow(W.scale))*sum(log(1/diag(Q))))
n.LTLA <- dim(COVID19eco)[1]
# Format the data for NIMBLE in a list
COVIDdata = list(
O = COVID19eco$deaths,                        # observed nb of deaths
# covariates
X = cbind(1,                                  # for the intercept
COVID19eco$NO2,                     # NO2
scale(COVID19eco$TtlICUB)[,1],      # ICU beds
COVID19eco$IMD_2,                   # IMD 2
COVID19eco$IMD_3,                   # IMD 3
COVID19eco$IMD_4,                   # IMD 4
COVID19eco$IMD_5)                   # IMD 5
)
COVIDConsts <-list(
N = n.LTLA,                                   # nb of LTLAs
# adjacency matrix
L = length(nbWB_B$weights),                   # the number of neighboring areas
E = COVID19eco$expectd,                       # expected number of deaths
adj = nbWB_B$adj,                             # the elements of the neigh. matrix
num = nbWB_B$num,
weights = nbWB_B$weights,
scale = scale,                                # the scale for the covariance
K = 7                                         # the total number of covariates
)
inits <- list(
list(
# first chain
tau.theta = 1,
tau.b = 1,
theta = rep(0.01, times = n.LTLA),
phi = rep(0.01, times = n.LTLA),
rho = 0.6,
beta = rep(0, 7)
),
#chain 2
list(
tau.theta = 3,
tau.b = 3,
theta = rep(0.1, times = n.LTLA),
phi = rep(0.1, times = n.LTLA),
rho = 0.9,
beta = c(-2,-2, rep(1, 5))
)
)
parameters = c("resSMR", "proba.resSMR", "sigma2.theta", "SMR", "RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]", "RR.beta[5]", "RR.beta[6]",
"overallRR", "sigma2.b", "mu", "rho", "RR.beta1_5NO2")
parameters = c("resSMR", "proba.resSMR", "sigma2.theta", "SMR", "RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]", "RR.beta[5]", "RR.beta[6]",
"overallRR", "sigma2.b", "mu", "rho", "RR.beta1_5NO2")
ni <- 500000  # nb iterations
nt <- 100      # thinning interval
nb <- 300000  # nb iterations as burn-in
nc <- 2       # nb chains
t0<- Sys.time()
modelBYM.eco <- nimbleMCMC(code = BYMecoCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = parameters,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
GR.diag <- gelman.diag(modelBYM.eco$samples, multivariate = FALSE)
all(GR.diag$psrf[,"Point est."] < 1.1)
which(GR.diag$psrf[,"Point est."] > 1.1)
ggs_BYMeco <- ggs(modelBYM.eco$samples)
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_traceplot() + theme_bw()
BYMecoCode <- nimbleCode(
{
for (i in 1:N){
O[i] ~ dpois(mu[i])                                       # Poisson likelihood
log(mu[i]) <- log(E[i]) + inprod(beta[], X[i,]) + b[i]
# of course you can write this explicitly too:
# log(mu[i]) <- log(E[i]) + alpha + b[i] +
#               beta1*X1[i] + beta2*X2[i] +
#               beta32*X32[i] + beta33*X33[i] +
# beta34*X34[i] + beta35*X35[i]
b[i] <- (1/sqrt(tau.b))*(sqrt((1-rho))*theta[i] +
sqrt(rho/scale)*phi[i])
theta[i] ~ dnorm(0, tau = tau.theta)                      # area-specific RE
SMR[i] <- exp(b[1] + b[i])                                # area-specific SIR
resSMR[i] <- exp(b[i])                                    # area-specific residual SIR
e[i] <- (O[i]-mu[i])/sqrt(mu[i])                          # residuals
proba.resSMR[i]<-step(resSMR[i]-1)                        # Posterior probability
}
# ICAR prior
phi[1:N] ~ dcar_normal(adj[1:L], weights[1:L],
num[1:N], tau = 1, zero_mean = 1)    # its scaled so tau = 1
# Priors
beta[1] ~ dflat()                                           # vague prior (Unif(-inf, +inf))
overallRR <- exp(beta[1])
# precision parameter of the reparametrisation
tau.b ~ dgamma(1, 0.01)                                     # prior for the precision of b
sigma2.b <- 1/tau.b                                         # the variance of b
# precision parameter of theta
tau.theta ~ dgamma(1, 0.01)                                 # prior for the precision of theta
sigma2.theta <- 1/tau.theta                                 # the variance of theta
# mixing parameter
rho ~ dbeta(1, 1)                                           # prior for the mixing parameter
# priors for the fixed effects
for(j in 1:(K-1)){
beta[j+1] ~ dnorm(0, tau = 1)
RR.beta[j] <- exp(beta[j+1])
}
RR.beta1_5NO2 <- exp(beta[2] * 5)                           # this will be explained later
}
)
ni <- 1000000  # nb iterations
nt <- 100      # thinning interval
nb <- 500000  # nb iterations as burn-in
nc <- 2       # nb chains
t0<- Sys.time()
modelBYM.eco <- nimbleMCMC(code = BYMecoCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = parameters,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
ggs_BYMeco <- ggs(modelBYM.eco$samples)
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_traceplot() + theme_bw()
ni <- 2000000  # nb iterations
nt <- 200      # thinning interval
nb <- 1000000  # nb iterations as burn-in
nc <- 2       # nb chains
t0<- Sys.time()
modelBYM.eco <- nimbleMCMC(code = BYMecoCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = parameters,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = FALSE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
GR.diag <- gelman.diag(modelBYM.eco$samples, multivariate = FALSE)
all(GR.diag$psrf[,"Point est."] < 1.1)
which(GR.diag$psrf[,"Point est."] > 1.1)
ggs_BYMeco <- ggs(modelBYM.eco$samples)
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_traceplot() + theme_bw()
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_autocorrelation() + theme_bw()
2000000/500
ni <- 4000000  # nb iterations
nt <- 200      # thinning interval
nb <- 2000000  # nb iterations as burn-in
nc <- 2       # nb chains
t0<- Sys.time()
modelBYM.eco <- nimbleMCMC(code = BYMecoCode,
data = COVIDdata,
constants = COVIDConsts,
inits = inits,
monitors = parameters,
niter = ni,
nburnin = nb,
thin = nt,
nchains = nc,
setSeed = 9,
progressBar = TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = TRUE
)
t1<- Sys.time()
t1 - t0
ggs_BYMeco <- ggs(modelBYM.eco$samples)
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_traceplot() + theme_bw()
ggs_BYMeco %>% filter(Parameter %in% c("RR.beta[1]",
"RR.beta[2]", "RR.beta[3]", "RR.beta[4]",
"RR.beta[5]", "RR.beta[6]")) %>%
ggs_autocorrelation() + theme_bw()
saveRDS(modelBYM.eco, file = "modelBYM.eco")
